// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"regexp"
	"fmt"
	"net/url"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-nso/internal/provider/helpers"
	"github.com/tidwall/sjson"
	"github.com/tidwall/gjson"
)
type Device struct {
	Instance types.String `tfsdk:"instance"`
	Id       types.String `tfsdk:"id"`
	Name types.String `tfsdk:"name"`
	Address types.String `tfsdk:"address"`
	Port types.Int64 `tfsdk:"port"`
	Authgroup types.String `tfsdk:"authgroup"`
	AdminState types.String `tfsdk:"admin_state"`
	NetconfNetId types.String `tfsdk:"netconf_net_id"`
	CliNedId types.String `tfsdk:"cli_ned_id"`
}

func (data Device) getPath() string {
	return fmt.Sprintf("tailf-ncs:devices/device=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data Device) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data Device) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.Null && !data.Name.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.Value)
	}
	if !data.Address.Null && !data.Address.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address", data.Address.Value)
	}
	if !data.Port.Null && !data.Port.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"port", strconv.FormatInt(data.Port.Value, 10))
	}
	if !data.Authgroup.Null && !data.Authgroup.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"authgroup", data.Authgroup.Value)
	}
	if !data.AdminState.Null && !data.AdminState.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"state.admin-state", data.AdminState.Value)
	}
	if !data.NetconfNetId.Null && !data.NetconfNetId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-type.netconf.ned-id", data.NetconfNetId.Value)
	}
	if !data.CliNedId.Null && !data.CliNedId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-type.cli.ned-id", data.CliNedId.Value)
	}
	return body
}

func (data *Device) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix+"name"); value.Exists() {
		data.Name.Value = value.String()
	} else {
		data.Name.Null = true
	}
	if value := res.Get(prefix+"address"); value.Exists() {
		data.Address.Value = value.String()
	} else {
		data.Address.Null = true
	}
	if value := res.Get(prefix+"port"); value.Exists() {
		data.Port.Value = value.Int()
	} else {
		data.Port.Null = true
	}
	if value := res.Get(prefix+"authgroup"); value.Exists() {
		data.Authgroup.Value = value.String()
	} else {
		data.Authgroup.Null = true
	}
	if value := res.Get(prefix+"state.admin-state"); value.Exists() {
		data.AdminState.Value = value.String()
	} else {
		data.AdminState.Null = true
	}
	if value := res.Get(prefix+"device-type.netconf.ned-id"); value.Exists() {
		data.NetconfNetId.Value = value.String()
	} else {
		data.NetconfNetId.Null = true
	}
	if value := res.Get(prefix+"device-type.cli.ned-id"); value.Exists() {
		data.CliNedId.Value = value.String()
	} else {
		data.CliNedId.Null = true
	}
}

func (data *Device) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix+"address"); value.Exists() {
		data.Address.Value = value.String()
		data.Address.Null = false
	}
	if value := res.Get(prefix+"port"); value.Exists() {
		data.Port.Value = value.Int()
		data.Port.Null = false
	}
	if value := res.Get(prefix+"authgroup"); value.Exists() {
		data.Authgroup.Value = value.String()
		data.Authgroup.Null = false
	}
	if value := res.Get(prefix+"state.admin-state"); value.Exists() {
		data.AdminState.Value = value.String()
		data.AdminState.Null = false
	}
	if value := res.Get(prefix+"device-type.netconf.ned-id"); value.Exists() {
		data.NetconfNetId.Value = value.String()
		data.NetconfNetId.Null = false
	}
	if value := res.Get(prefix+"device-type.cli.ned-id"); value.Exists() {
		data.CliNedId.Value = value.String()
		data.CliNedId.Null = false
	}
}

func (data *Device) setUnknownValues() {
	if data.Instance.Unknown {
		data.Instance.Unknown = false
		data.Instance.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	if data.Address.Unknown {
		data.Address.Unknown = false
		data.Address.Null = true
	}
	if data.Port.Unknown {
		data.Port.Unknown = false
		data.Port.Null = true
	}
	if data.Authgroup.Unknown {
		data.Authgroup.Unknown = false
		data.Authgroup.Null = true
	}
	if data.AdminState.Unknown {
		data.AdminState.Unknown = false
		data.AdminState.Null = true
	}
	if data.NetconfNetId.Unknown {
		data.NetconfNetId.Unknown = false
		data.NetconfNetId.Null = true
	}
	if data.CliNedId.Unknown {
		data.CliNedId.Unknown = false
		data.CliNedId.Null = true
	}
}

func (data *Device) getDeletedListItems(ctx context.Context, state Device) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *Device) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
