// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"regexp"

	"github.com/CiscoDevNet/terraform-provider-nso/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type DeviceGroup struct {
	Instance     types.String `tfsdk:"instance"`
	Id           types.String `tfsdk:"id"`
	DeleteMode   types.String `tfsdk:"delete_mode"`
	Name         types.String `tfsdk:"name"`
	DeviceNames  types.List   `tfsdk:"device_names"`
	DeviceGroups types.List   `tfsdk:"device_groups"`
}

type DeviceGroupData struct {
	Instance     types.String `tfsdk:"instance"`
	Id           types.String `tfsdk:"id"`
	Name         types.String `tfsdk:"name"`
	DeviceNames  types.List   `tfsdk:"device_names"`
	DeviceGroups types.List   `tfsdk:"device_groups"`
}

func (data DeviceGroup) getPath() string {
	return fmt.Sprintf("tailf-ncs:devices/device-group=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

func (data DeviceGroupData) getPath() string {
	return fmt.Sprintf("tailf-ncs:devices/device-group=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

// if last path element has a key -> remove it
func (data DeviceGroup) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data DeviceGroup) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.ValueString())
	}
	if !data.DeviceNames.IsNull() && !data.DeviceNames.IsUnknown() {
		var values []string
		data.DeviceNames.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-name", values)
	}
	if !data.DeviceGroups.IsNull() && !data.DeviceGroups.IsUnknown() {
		var values []string
		data.DeviceGroups.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-group", values)
	}
	return body
}

func (data *DeviceGroup) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get(prefix + "device-name"); value.Exists() && !data.DeviceNames.IsNull() {
		data.DeviceNames = helpers.GetStringList(value.Array())
	} else {
		data.DeviceNames = types.ListNull(types.StringType)
	}
	if value := res.Get(prefix + "device-group"); value.Exists() && !data.DeviceGroups.IsNull() {
		data.DeviceGroups = helpers.GetStringList(value.Array())
	} else {
		data.DeviceGroups = types.ListNull(types.StringType)
	}
}

func (data *DeviceGroupData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "device-name"); value.Exists() {
		data.DeviceNames = helpers.GetStringList(value.Array())
	} else {
		data.DeviceNames = types.ListNull(types.StringType)
	}
	if value := res.Get(prefix + "device-group"); value.Exists() {
		data.DeviceGroups = helpers.GetStringList(value.Array())
	} else {
		data.DeviceGroups = types.ListNull(types.StringType)
	}
}

func (data *DeviceGroup) getDeletedListItems(ctx context.Context, state DeviceGroup) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *DeviceGroup) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}

func (data *DeviceGroup) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.DeviceNames.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/device-name", data.getPath()))
	}
	if !data.DeviceGroups.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/device-group", data.getPath()))
	}
	return deletePaths
}
