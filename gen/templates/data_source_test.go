//go:build ignore
// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

{{if .ExcludeTest}}//go:build testAll{{end}}
// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceNso{{camelCase .Name}}(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: {{if .TestPrerequisites}}testAccDataSourceNso{{camelCase .Name}}PrerequisitesConfig+{{end}}testAccDataSourceNso{{camelCase .Name}}Config,
				Check: resource.ComposeTestCheckFunc(
					{{- $name := .Name }}
					{{- range  .Attributes}}
					{{- if and (not .Id) (not .Reference) (not .WriteOnly) (not .ExcludeTest)}}
					{{- if eq .Type "List"}}
					{{- $list := .TfName }}
					{{- range  .Attributes}}
					{{- if and (not .WriteOnly) (not .ExcludeTest)}}
					{{- if eq .Type "List"}}
					{{- $clist := .TfName }}
					{{- range  .Attributes}}
					{{- if and (not .WriteOnly) (not .ExcludeTest)}}
					resource.TestCheckResourceAttr("data.nso_{{snakeCase $name}}.test", "{{$list}}.0.{{$clist}}.0.{{.TfName}}{{if or (eq .Type "StringList") (eq .Type "Int64List")}}.0{{end}}", "{{.Example}}"),
					{{- end}}
					{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("data.nso_{{snakeCase $name}}.test", "{{$list}}.0.{{.TfName}}{{if or (eq .Type "StringList") (eq .Type "Int64List")}}.0{{end}}", "{{.Example}}"),
					{{- end}}
					{{- end}}
					{{- end}}
					{{- else}}
					resource.TestCheckResourceAttr("data.nso_{{snakeCase $name}}.test", "{{.TfName}}{{if or (eq .Type "StringList") (eq .Type "Int64List")}}.0{{end}}", "{{.Example}}"),
					{{- end}}
					{{- end}}
					{{- end}}
				),
			},
		},
	})
}

{{- if .TestPrerequisites}}
const testAccDataSourceNso{{camelCase .Name}}PrerequisitesConfig = `
{{- range $index, $item := .TestPrerequisites}}
resource "nso_restconf" "PreReq{{$index}}" {
	path = "{{.Path}}"
	{{- if .NoDelete}}
	delete = false
	{{- end}}
	attributes = {
		{{- range  .Attributes}}
		"{{.Name}}" = {{if .Reference}}{{.Reference}}{{else}}"{{.Value}}"{{end}}
		{{- end}}
	}
	{{- if .Lists}}
	lists = [
	{{- range .Lists}}
		{
			name = "{{.Name}}"
			key = "{{.Key}}"
			items = [
				{{- range .Items}}
				{
					{{- range .Attributes}}
					"{{.Name}}" = {{if .Reference}}{{.Reference}}{{else}}"{{.Value}}"{{end}}
					{{- end}}
				},
				{{- end}}
			]
		},
	{{- end}}
	]
	{{- end}}
	{{- if .Dependencies}}
	depends_on = [{{range .Dependencies}}nso_restconf.PreReq{{.}}, {{end}}]
	{{- end}}
}
{{ end}}
`
{{- end}}

const testAccDataSourceNso{{camelCase .Name}}Config = `

resource "nso_{{snakeCase $name}}" "test" {
	{{- if and (not .NoDelete) (not .NoDeleteAttributes) (not .DefaultDeleteAttributes)}}
	delete_mode = "attributes"
	{{- end}}
	{{- range  .Attributes}}
	{{- if not .ExcludeTest}}
	{{- if eq .Type "List"}}
	{{.TfName}} = [{
		{{- range  .Attributes}}
		{{- if not .ExcludeTest}}
		{{- if eq .Type "List"}}
		{{.TfName}} = [{
			{{- range  .Attributes}}
			{{- if not .ExcludeTest}}
			{{.TfName}} = {{if eq .Type "String"}}"{{.Example}}"{{else if eq .Type "StringList"}}["{{.Example}}"]{{else if eq .Type "Int64List"}}[{{.Example}}]{{else}}{{.Example}}{{end}}
			{{- end}}
			{{- end}}
		}]
		{{- else}}
		{{.TfName}} = {{if eq .Type "String"}}"{{.Example}}"{{else if eq .Type "StringList"}}["{{.Example}}"]{{else if eq .Type "Int64List"}}[{{.Example}}]{{else}}{{.Example}}{{end}}
		{{- end}}
		{{- end}}
		{{- end}}
	}]
	{{- else}}
	{{.TfName}} = {{if eq .Type "String"}}"{{.Example}}"{{else if eq .Type "StringList"}}["{{.Example}}"]{{else if eq .Type "Int64List"}}[{{.Example}}]{{else}}{{.Example}}{{end}}
	{{- end}}
	{{- end}}
	{{- end}}
	{{- if .TestPrerequisites}}
	depends_on = [{{range $index, $item := .TestPrerequisites}}nso_restconf.PreReq{{$index}}, {{end}}]
	{{- end}}
}

data "nso_{{snakeCase .Name}}" "test" {
	{{- range .Attributes}}
	{{- if or .Id .Reference}}
	{{.TfName}} = {{if eq .Type "String"}}"{{.Example}}"{{else if eq .Type "StringList"}}["{{.Example}}"]{{else if eq .Type "Int64List"}}[{{.Example}}]{{else}}{{.Example}}{{end}}
	{{- end}}
	{{- end}}
	depends_on = [nso_{{snakeCase $name}}.test]
}
`
